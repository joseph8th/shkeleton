#!/usr/bin/env bash

####  DECLARATIONS  ##################################################

# declare both SELF_ARGS and COMMANDS but *only use one or the other*
SELF_ARGS=
declare -a COMMANDS

declare -A SELF_OPTS_HELP        # key: 'self' cmd short opt char
declare -A SELF_OPTARGS          # key: ""
declare -a SELF_SHORTOPTS_NOARG  # key: cmd short opt char

declare -A CMD_HELP              # key: CMD name
declare -A CMD_ARGS              # key: ""
declare -A CMD_OPTS              # key: ""
declare -A CMD_SHORTOPTS         # key: ""
declare -A CMD_LONGOPTS          # key: cmd short opt char
declare -A CMD_OPTS_HELP         # key: ""
declare -A CMD_OPTARGS           # key: ""

# user input params parsed into following variables ...

PARAM=               # system argv as array
CMD=                 # the chosen command OR 'self'
OPTS=                # string of short opts chosen

declare -A ARGS      # positional arguments array
declare -A OPTARGS   # associative array of opt args

# some global definitions including sourcing user code ...

ERRNO=0
PARAMIX=0            # current index of $PARAM
ARGIX=0              # current index of ARGS in PARAM

readonly SCRIPT=$(basename $0)
readonly SCRIPT_DIR=$(readlink -m $(dirname $0))
readonly SCRIPT_SH="${SCRIPT}.sh"    # put your code in ${SCRIPT}.sh
source "${SCRIPT_SH}"


####  UTILITY FUNCTIONS  #############################################

function _is_empty {
    local var="$1"
    [[ -z "$var" ]]
}

function _is_zero {
    local var=$1
    [[ $var -eq 0 ]]
}

function _greater_than {
    local x=$1; shift
    local y=$1
    [[ $x -gt $y ]]
}

function _less_than {
    local x=$1; shift
    local y=$1
    [[ $x -lt $y ]]
}

function _less_than_or_equal {
    local x=$1; shift
    local y=$1
    [[ $x -le $y ]]
}

# pass vars like: _in_array "$value" array[@]
function _in_array {
    local value="$1"; shift
    declare -a array=("${!1}")
    [[ " ${array[@]} " =~ " ${value} " ]]
}

function _str_equal {
    local str1=$1; shift
    local str2=$1
    [[ "$str1" == "$str2" ]]
}

function _trim {
    echo "$1" | sed -n '1h;1!H;${;g;s/^[ \t]*//g;s/[ \t]*$//g;p;}'
}

# error handling
function _err {
    ((ERRNO++))
}

function _exit_err {
    local msg="$@"
    _is_zero $ERRNO && exit
    ! _is_empty "$msg" && printf "\nERROR (${ERRNO}): $msg\n"
    echo "Try '${SCRIPT} --help' for more information."
    exit $ERRNO
}

# output debugging info
function _debug {
    ! _is_zero ${DEBUG} && printf "${1}"
}

####  HELP FUNCTIONS  ################################################

# function to generate man page
function _gen_man {

    [[ ! -d "./man" ]] && mkdir ./man

    today=$(date +"%d %b %Y")
    manf="./man/${SCRIPT}"

    # man page header data
    str=".\\\\\" Manpage for ${SCRIPT}.\n"
    str="${str}.\\\\\" Contact ${EMAIL} to correct errors or typos.\n"
    str="${str}.TH man ${MAN_TYPE} \"${today}\" \"${VERSION}\" \"${SCRIPT} man page\"\n"

    # name and usage (synopsis)
    str="${str}.SH NAME\n${SELF_NAME}\n"
    str="${str}.SH SYNOPSIS\n${SCRIPT}"

    # usage - self options
    self_opts=( ${CMD_SHORTOPTS[self]} )
    for opt in "${self_opts[@]}"; do
        str="${str} [--${CMD_LONGOPTS[$opt]}"
        ! _is_empty "${SELF_OPTARGS[@]}" \
            && str="${str} ${SELF_OPTARGS[$opt]}]" \
            || str="${str}]"
    done

    # usage - self args || command + opts + args
    if ! _is_empty "${SELF_ARGS}"; then
        str="${str} ${SELF_ARGS}"
    elif ! _is_empty "${COMMANDS[@]}"; then
        str="${str} COMMAND"
        ! _is_empty "${CMD_OPTS[@]}" && str="${str} [OPTS]"
        ! _is_empty "${CMD_ARGS[@]}" && str="${str} [ARGS]"
    fi
    str="${str}\n"

    # self description
    if ! _is_empty "${SELF_HELP}"; then
        str="${str}.SH DESCRIPTION\n${SELF_HELP}\n"
    fi

    # self options - with args and help
    if ! _is_empty "${SELF_OPTS}"; then
        str="${str}.SH OPTIONS\n"

        self_opts=( ${CMD_SHORTOPTS[self]} )
        for opt in "${self_opts[@]}"; do
            str="${str}.IP \"-${opt} --${CMD_LONGOPTS[$opt]}"
            ! _is_empty "${SELF_OPTARGS[$opt]}" \
                && str="${str} ${SELF_OPTARGS[$opt]}\"\n" \
                || str="${str}\"\n"
            str="${str}${SELF_OPTS_HELP[$opt]}\n"
        done
    fi

    # commands - with args and help
    if _greater_than $((${#COMMANDS[@]}-1)) 0; then
        str="${str}.SH COMMANDS\n"
    fi
    for cmd in "${COMMANDS[@]}"; do
        _str_equal "${cmd}" "self" && continue
        str="${str}.IP \"${cmd} ${CMD_ARGS[$cmd]}\"\n"
        str="${str}${CMD_HELP[$cmd]}\n"
    done

    # command options - with args and help
    if ! _is_empty "${CMD_OPTS[@]}"; then

        # do the same as for SELF_OPTS for each of COMMANDS
        for cmd in "${COMMANDS[@]}"; do
            _is_empty "${CMD_OPTS[$cmd]}" \
                || _str_equal "${cmd}" "self" \
                && continue
            str="${str}.SH ${cmd}:\n"

            cmd_opts=( ${CMD_OPTS[$cmd]} )
            cmd_optix=0

            while _less_than $cmd_optix ${#cmd_opts[@]}; do
                cmd_opt="${cmd_opts[$cmd_optix]}"
                ((cmd_optix++))
                str="${str}.IP \"-${cmd_opt} --${cmd_opts[$cmd_optix]}"
                ! _is_empty "{CMD_OPTARGS[$cmd_opt]}" \
                    && str="${str} ${CMD_OPTARGS[$cmd_opt]}"
                str="${str}\"\n${CMD_OPTS_HELP[$cmd_opt]}\n"
                ((cmd_optix++))
            done
        done
    fi

    # additonal manpage sections - define more in ${SCRIPT}.sh and add here
    ! _is_empty "${FILES}" \
        && str="${str}.SH FILES\n${FILES}\n"
    ! _is_empty "${ENVIRONMENT}" \
        && str="${str}.SH ENVIRONMENT\n${ENVIRONMENT}\n"
    ! _is_empty "${EXIT_STATUS}" \
        && str="${str}.SH \"EXIT STATUS\"\n${EXIT_STATUS}\n"
    ! _is_empty "${EXAMPLES}" \
        && str="${str}.SH EXAMPLES\n${EXAMPLES}\n"
    ! _is_empty "${BUGS}" \
        && str="${str}.SH BUGS\n${BUGS}\n"
    ! _is_empty "${AUTHOR}" \
        && str="${str}.SH AUTHOR\n${AUTHOR}" \
        && ! _is_empty "${AUTHOR_EMAIL}" \
        && str="${str} <${AUTHOR_EMAIL}>\n" \
        || str="${str}\n"
    ! _is_empty "${SEE_ALSO}" \
        && str="${str}.SH \"SEE ALSO\"\n${SEE_ALSO}\n"

    # make the manpage
    printf "${str}" > "./man/${SCRIPT}"
}

# function to print help and return
function _print_help {
    if ! _is_zero ${MAN_HELP}; then
        man "./man/${SCRIPT}"
    else
        echo && man "./man/${SCRIPT}" > "./man/${SCRIPT}.txt" && \
            more "./man/${SCRIPT}.txt"
    fi
}


####  INITIALIZATION  ################################################

function _init {

    # some working vars
    local optix=
    local opt=
    local longopt=

    # initialize PARAM from command line
    PARAM=( "${@}" )

    # initialize SELF as CMD
    if _is_empty "${COMMANDS}"; then
        COMMANDS=( "self" )
    else
        COMMANDS=( "self" "${COMMANDS[@]}" )
    fi

    CMD_HELP[self]="${SELF_HELP}"
    CMD_ARGS[self]="${SELF_ARGS}"

    # using SELF_OPTS_NOARG?
    if _is_empty "${SELF_OPTS_NOARG}"; then
        CMD_OPTS[self]="${SELF_OPTS}"
    else
        CMD_OPTS[self]="${SELF_OPTS_NOARG} ${SELF_OPTS}"

        # init SELF_SHORTOPTS_NOARG
        local self_opts_noarg=( ${SELF_OPTS_NOARG} )

        optix=0
        while ! _is_empty "${self_opts_noarg[@]}"; do
            SELF_SHORTOPTS_NOARG[$optix]=${self_opts_noarg[0]}
            self_opts_noarg=( ${self_opts_noarg[@]:2} )
            ((optix++))
        done
    fi

    # initialize CMD arrays and associative arrays
    for cmd in "${COMMANDS[@]}"; do
        _is_empty "${CMD_OPTS[$cmd]}" && continue

        # init options
        optix=0
        opts=( ${CMD_OPTS[$cmd]} )

        while _less_than $optix ${#opts[@]}; do
            opt="${opts[$optix]}"
            CMD_SHORTOPTS[$cmd]="${CMD_SHORTOPTS[$cmd]} ${opt}"
            ((optix++))
            CMD_LONGOPTS[$opt]="${opts[$optix]}"
            ((optix++))
        done
    done

    if ! _is_zero ${#SELF_OPTARGS[@]}; then
        self_opts=( ${CMD_SHORTOPTS[self]} )
        for opt in "${self_opts[@]}"; do
            if ! _is_empty "${SELF_OPTARGS[$opt]}"; then
                CMD_OPTARGS[$opt]="${SELF_OPTARGS[$opt]}"
            fi
        done
    fi

    # generate manpage if DEBUG=1 or no manpage exists
    ! _is_empty ${DEBUG} || [[ ! -f "./man/${SCRIPT}" ]] && _gen_man
}


####  COMMAND-LINE PARSING  ##########################################

# consume PARAM 1st to last for ARGS, or by array slice for OPTARGS
function _consume_param {
    local is_optargs=$1
    if _is_zero $is_optargs; then
        PARAM=( ${PARAM[@]:1} )
    else
        PARAM=( ${PARAM[@]::$ARGIX} ${PARAM[@]:$PARAMIX} )
    fi
}

# utility function - parse to ARGS or OPTARGS
function _set_arg {

    local arg_key=$1        # for either CMD_ARGS[cmd] or CMD_OPTARGS[opt]
    local is_optargs=$2     # flag 1 if setting OPTARGS
    local arg=              # working variable

    # no quote then regular single word argument
    if ! _str_equal "${PARAM[( PARAMIX-1 )]:0:1}" \"
    then
        arg="${PARAM[( PARAMIX-1 )]}"
        _consume_param $is_optargs

    # quoted arguments (\"words lyrics\")
    else
        # get 1st word in quoted arg sans the initial quote
        arg="\"${PARAM[( PARAMIX-1 )]:1}"
        _consume_param $is_optargs

        # get words in the middle (no end quote)
        while ! _is_zero ${#PARAM[@]} \
            && ! _str_equal "${PARAM[( PARAMIX-1 )]:(-1)}" \"
        do
            arg="${arg} ${PARAM[( PARAMIX-1 )]}"
            _consume_param $is_optargs
        done

        # if end quote forgotten then err out
        if _is_zero ${#PARAM[@]} \
            && ! _str_equal "${PARAM[( PARAMIX-1 )]:(-1)}" \"
        then
            _err; _exit_err "Imbalanced quotes in argument."
        fi

        # get last word sans end quote
        arg="${arg} ${PARAM[( PARAMIX-1 )]%\"}\""
        _consume_param $is_optargs
    fi

    # then set desired args array at $arg_key
    if _is_zero $is_optargs; then
        ARGS[$arg_key]="${arg}"
    else
        if _is_empty "${#OPTARGS[@]}"; then
            OPTARGS[$arg_key]="${arg}"
        else
            OPTARGS[$arg_key]="${OPTARGS[$arg_key]} ${arg}"
        fi
    fi
}

# parse command (first argument) as you like ...
function _parse_cmd {

    # parse args and opts
    _is_empty "${COMMANDS[@]}" && return

    # use regex matching for 1st param (command) since not complicated
    if _in_array "${PARAM[0]}" COMMANDS[@] \
        || _str_equal "${PARAM[0]}" "${COMMANDS[${#COMMANDS[@]}-1]}"
    then
        CMD="${PARAM[0]}"
        PARAM=( ${PARAM[@]:1} )
    else
        CMD='self'
    fi

    # optional debugging block
    str="PARSE cmd:\n  cmd: ${CMD} "
    ! _is_empty "${#PARAM[@]}" \
        && str="${str}+ [${PARAM[@]} ]\n" \
        || str="${str}\n"
    str="${str}  rem params (${#PARAM[@]}): ${PARAM[@]}\n"
    _debug "${str}"

    # if arguments expected then print err & exit
    if _is_zero ${#PARAM[@]} && ! _is_empty "${CMD_ARGS[$CMD]}"; then
        _err; _exit_err "Command arguments expected."
    fi

    # if no more params don't bother parsing args and opts
    ! _is_zero ${#PARAM[@]}
}

# parse '-' prefixed options ...
function _parse_opts {

    # run cmd without args or opts
    _is_zero ${#CMD_OPTS[@]} && _is_zero ${#CMD_ARGS[@]} && return

    local optargs=
    local cmd_optargs=
    local is_valid=

    local is_optargs=1
    local cmd_opts=( ${CMD_SHORTOPTS[$CMD]} )
    local cmd_args=( ${CMD_ARGS[$CMD]} )

    # debugging ...
    local str="PARSE opts:\n"

    # loop over PARAM and consume valid opts & optargs
    while _less_than_or_equal $PARAMIX ${#PARAM[@]}
    do
        # skip arguments if at beginning of CL
        if ! _str_equal "${PARAM[$PARAMIX]:0:1}" "-"; then
            ((PARAMIX++))
            ((ARGIX++)) # for optarg array slicing purposes
            continue
        fi

        # make sure given option is valid
        if _str_equal "${PARAM[$PARAMIX]:0:2}" "--"; then
            _in_array "${PARAM[$PARAMIX]:2}" CMD_LONGOPTS[@] \
                && is_valid=true || is_valid=false
        else
            _in_array "${PARAM[$PARAMIX]:1}" cmd_opts[@] \
                && is_valid=true || is_valid=false
        fi

        if [ $is_valid = false ]; then
            _err; _exit_err "Invalid option given: ${PARAM[$PARAMIX]}"
        fi

        # we hit a valid option so parse it ...
        for opt in "${cmd_opts[@]}"; do
            if _str_equal "${PARAM[$PARAMIX]}" "-${opt}" \
                || _str_equal "${PARAM[$PARAMIX]}" "--${CMD_LONGOPTS[$opt]}"
            then
                OPTS=( ${OPTS[@]} ${opt} )
                ((PARAMIX++))
                _consume_param $is_optargs
                cmd_optargs=( ${CMD_OPTARGS[$opt]} )

                if ! _is_zero ${#cmd_optargs[@]}; then
                    for optarg in "${cmd_optargs[@]}"; do
                        _set_arg $opt $is_optargs
                    done

                    optargs=( ${OPTARGS[$opt]} )
                    if _greater_than ${#cmd_optargs[@]} ${#optargs[@]}; then
                        _err; _exit_err "Too few option arguments."
                    fi
                fi

                # Done setting args for this OPT, so decr to get next
                ((PARAMIX--))

                # debugging ...
                str="${str}  opt: -${opt} ${OPTARGS[$opt]}\n"
            fi
        done
    done

    # debugging ...
    str="${str}  rem params (${#PARAM[@]}): ${PARAM[@]}\n"
    _debug "${str}"

    # reset PARAM indexes before parsing args
    PARAMIX=1
    ARGIX=0

    # we parse opts before args so if there are required args then return true
    ! _is_zero ${#PARAM[@]} || ! _is_zero ${#cmd_args[@]}
}

# parse positional arguments as you like ...
function _parse_args {

    # no args defined at all
    _is_zero ${#CMD_ARGS[@]} && return

    # get pos args for CMD
    local cmd_args=( ${CMD_ARGS[$CMD]} )

    # return if no args defined for $CMD
    _is_zero ${#cmd_args[@]} && return

    # return if any SELF_OPTS_NOARG given
    if ! _is_empty "${OPTS[@]}"; then
        for opt in "${OPTS[@]}"; do
            _in_array $opt SELF_SHORTOPTS_NOARG[@] && return
        done
    fi

    # if too few rem params for # of args for this command, then error
    if _greater_than ${#cmd_args[@]} ${#PARAM[@]}; then
        _err;  _exit_err "Too few positional arguments."
    fi

    # debugging ...
    str="PARSE args:\n"

    # find arg keys for given command & build $ARGS assoc array
    for arg in "${cmd_args[@]}"; do
        _is_empty "${PARAM[0]}" && break
        _set_arg $arg 0

        # debugging ...
        str="${str}  ${arg}=${ARGS[${arg}]}\n"
    done

    # optional debugging ...
    str="${str}  cmd args: $CMD ${cmd_args[@]}\n"
    str="${str}  rem params (${#PARAM[@]}): ${PARAM[@]}\n"
    _debug "${str}"

    ! _is_zero ${#PARAM[@]}
}

# parameters are $CMD, $ARGS and $OPTS
function _run_params {

    if ! _is_zero ${#PARAM[@]}; then
        _err; _exit_err "Too many command line arguments."
    fi

    # debugging ...
    str="RUN params:\n  [${CMD}"
    if ! _is_empty "${OPTS[@]}"; then
        for opt in "${OPTS[@]}"; do
            str="${str}, -${opt}"
            ! _is_empty "${OPTARGS[$opt]}" \
                && str="${str} ${OPTARGS[$opt]}"
        done
    fi
    if ! _is_empty "${ARGS[@]}"; then
        for arg in "${ARGS[@]}"; do
            str="${str}, ${arg}"
        done
    fi
    _debug "${str}]\n"

    # run the command
    _run_${CMD}
}


####  MAIN  ##########################################################

function _main {

    # initialize & parse command line
    _init "${@}"
    _parse_cmd && _parse_opts && _parse_args

    # error check
    ! _is_zero ${ERRNO} \
        && _print_help \
        && _exit_err "Unable to parse command line."

    # run the _run_CMD function with parsed params
    _run_params
}

_main "$@"
exit ${ERRNO}
